import v8py
import sys


def test_wasm(context):
    if sys.version_info.major < 3:
        return

    context.eval('WM = WebAssembly.Module')
    context.eval('WI = WebAssembly.Instance')

    # Byte code for:
    #
    # ```
    # (module
    #   (type $t0 (func (result i32)))
    #   (type $t1 (func (param i32 i32) (result i32)))
    #   (import "env" "read_register" (func $read_register (type $t0)))
    #   (func $add (export "add") (type $t1) (param $p0 i32) (param $p1 i32) (result i32)
    #     get_local $p1
    #     get_local $p0
    #     i32.add
    #     call $read_register
    #     i32.add))
    #  ```

    module = v8py.new(context.glob.WM, bytes([
        0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0b, 0x02, 0x60,
        0x00, 0x01, 0x7f, 0x60, 0x02, 0x7f, 0x7f, 0x01, 0x7f, 0x02, 0x15, 0x01,
        0x03, 0x65, 0x6e, 0x76, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65,
        0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x00, 0x00, 0x03, 0x02, 0x01, 0x01,
        0x07, 0x07, 0x01, 0x03, 0x61, 0x64, 0x64, 0x00, 0x01, 0x0a, 0x0c, 0x01,
        0x0a, 0x00, 0x20, 0x01, 0x20, 0x00, 0x6a, 0x10, 0x00, 0x6a, 0x0b
    ]))

    instance = v8py.new(context.glob.WI, module, dict(env=dict(read_register=lambda: 3)))

    assert(instance.exports.add(12, 19) == 34)

